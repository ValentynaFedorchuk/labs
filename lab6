package lab6graf;

public class Vertex {
	  private char label;  //назва вершини буквою

	  public Vertex(final char label) {
	     this.label = label;
	  }

	  public char getLabel() {
	     return this.label;
	  }

}

package lab6graf;

import java.util.Scanner;
import java.util.Stack;

public class Graph {
	  private int MAX_VERTS;//макс к-сть вершин
	  private int MAX_E;//макс к-сть вершин
	  private int nEdges = 0;//спочатку 0 ребер
	  private Vertex vertexArray[]; //масив вершин
	  private int adjMat[][]; // матриця суміжності
	  private int incidenceMat[][]; // матриця інцидентності
	  private int nVerts; // поточна к сть вершин
	  private Stack<Integer> stack;

	  public Graph(int qtV, int qtE) { // ініціалізація внутрішніх полів
		MAX_VERTS = qtV;
		MAX_E = qtE;
	     vertexArray = new Vertex[qtV];
	     adjMat = new int[qtV][qtV];
	     incidenceMat = new int[qtV][qtE];
	     nVerts = 0;
	     for (int j = 0; j < qtV; j++) {
	        for (int k = 0; k < qtV; k++) {
	           adjMat[j][k] = 0;
	        }
	     }
	     for (int j = 0; j < qtV; j++) {
		        for (int k = 0; k < qtE; k++) {
		        	incidenceMat[j][k] = 0;
		        }
		     }
	     stack = new Stack<>();
	  }

	  public void addVertex(char lab) {
	     vertexArray[nVerts++] = new Vertex(lab);
	  }

	  public void addEdge(int start, int end) {
	     adjMat[start][end] = 1;
	     adjMat[end][start] = 1;
	     
	     incidenceMat[end][nEdges] = 1;
	     incidenceMat[start][nEdges] = 1;
	     nEdges++;
	  }

	  public void displayVertex(int v) {
	     System.out.println(vertexArray[v].getLabel());
	  }
	  
	  public void printAdjMatrix() {
		  for (int j = 0; j < MAX_VERTS; j++) {
		        for (int k = 0; k < MAX_VERTS; k++) {
		           System.out.print(adjMat[j][k] + " ");
		        }
		        System.out.println();
		     }
	  }
	  
	  public void printIncMatrix() {
		  for (int j = 0; j < MAX_VERTS; j++) {
		        for (int k = 0; k < MAX_E; k++) {
		           System.out.print(incidenceMat[j][k] + " ");
		        }
		        System.out.println();
		     }
	  }
	  
	  public void printEdgesList() {
		  for (int j = 0; j < nEdges; j++) {
			  System.out.print("Ребро № " + (j + 1) + ": ");
			for (int i = 0; i < nVerts; i++) {
				if (incidenceMat[i][j] == 1) {
					System.out.print(vertexArray[i].getLabel() + " ");
				}
			}
			System.out.println("");
		}
		  
	  }
	  
	  public void printAdjList() {
		  for (int j = 0; j < MAX_VERTS; j++) {
		        for (int k = 0; k < MAX_VERTS; k++) {
		        	if (adjMat[j][k] == 1) {
						System.out.print("(" + j + "; " + k + "), ");
					}
		        }
		        
		     }
	}
	  
	  public void createIncUsingAdj() {
		  Scanner s = new Scanner(System.in);
		  System.out.println("Введіть матрицю суміжності: ");
		  for (int i = 0; i < MAX_VERTS; i++) {
			for (int j = 0; j < MAX_VERTS; j++) {
				adjMat[i][j] = s.nextInt();
				if (j <= i) {
					if (adjMat[i][j] == 1) {
						incidenceMat[i][nEdges] = 1;
						incidenceMat[j][nEdges] = 1;
						nEdges++;
					}
				}	
			}
		}	  
	}
	  
	  public void createAdjListUsingAdjM() {
		  Scanner s = new Scanner(System.in);
		  System.out.println("Введіть матрицю суміжності: ");
		  for (int i = 0; i < MAX_VERTS; i++) {
			for (int j = 0; j < MAX_VERTS; j++) {
				adjMat[i][j] = s.nextInt();
						
			}
		}
	}
	  
	  public void printEdgesListWithoutL() {
		  for (int j = 0; j < nEdges; j++) {
			  System.out.print("Ребро № " + (j + 1) + ": ");
			for (int i = 0; i < MAX_VERTS; i++) {
				if (incidenceMat[i][j] == 1) {
					System.out.print( i + " ");
				}
			}
			System.out.println("");
		}
		  
	}

}

package lab6graf;

import java.util.Stack;

public class OrientedGraph {
	private int MAX_VERTS;//макс к-сть вершин
	private int MAX_Edges;//макс к-сть ребер
	private int nEdges = 0;//спочатку 0 ребер
	private Vertex vertexArray[]; //масив вершин
	private int adjMat[][]; // матриця суміжності
	private int incidenceMat[][]; // матриця інцидентності
	private int nVerts; // поточна к сть вершин
	
	public OrientedGraph(int qtV, int qtE) { // ініціалізація внутрішніх полів
		MAX_VERTS = qtV;
		MAX_Edges = qtE;
	     vertexArray = new Vertex[qtV];
	     adjMat = new int[qtV][qtV];
	     incidenceMat = new int[qtV][qtE];
	     nVerts = 0;
	     for (int j = 0; j < qtV; j++) {
	        for (int k = 0; k < qtV; k++) {
	           adjMat[j][k] = 0;
	        }
	     }
	     for (int j = 0; j < qtV; j++) {
		        for (int k = 0; k < qtE; k++) {
		        	incidenceMat[j][k] = 0;
		        }
		     }
	  }
	
	public void addVertex(char lab) {
	     vertexArray[nVerts++] = new Vertex(lab);
	  }
	
	public void addEdge(int start, int end) {
	     adjMat[start][end] = 1;
	     
	     incidenceMat[end][nEdges] = 1;
	     incidenceMat[start][nEdges] = -1;
	     nEdges++;
	  }
	
	public void displayVertex(int v) {
	     System.out.println(vertexArray[v].getLabel());
	  }
	  
	public void printAdjMatrix() {
		for (int j = 0; j < MAX_VERTS; j++) {
			for (int k = 0; k < MAX_VERTS; k++) {
		        System.out.print(adjMat[j][k] + " ");
		        }
		        System.out.println();
		     }
	  }
	
	public void printIncMatrix() {
		  for (int j = 0; j < MAX_VERTS; j++) {
		        for (int k = 0; k < MAX_Edges; k++) {
		           System.out.print(incidenceMat[j][k] + " ");
		        }
		        System.out.println();
		     }
	  }
	
	public void printEdgesList() {
		  for (int j = 0; j < nEdges; j++) {
			  System.out.print("Ребро № " + (j + 1) + ": ");
			for (int i = 0; i < nVerts; i++) {
				if (incidenceMat[i][j] == -1) {
					System.out.print("Початок: " + vertexArray[i].getLabel() + " ");
				}
				else if (incidenceMat[i][j] == 1) {
					System.out.print("Кінець: " + vertexArray[i].getLabel() + " ");
				}
			}
			System.out.println("");
		}
		  
	  }
	
	public void printAdjList() {
		  for (int j = 0; j < MAX_VERTS; j++) {
		        for (int k = 0; k < MAX_VERTS; k++) {
		        	if (adjMat[j][k] == 1) {
						System.out.print("(" + j + "; " + k + "), ");
					}
		        }
		        
		     }
	}
}

package lab6graf;

import java.util.Scanner;

public class Solution {
	public static void main(String[] args) {
		
		System.out.println("НЕОРІЄНТОВАНИЙ ГРАФ\n");
		
	     Graph graph = new Graph(6, 14);
	     graph.addVertex('A'); //0
	     graph.addVertex('B'); //1
	     graph.addVertex('C'); //2
	     graph.addVertex('D'); //3
	     graph.addVertex('E'); //4
	     graph.addVertex('F'); //5

	     graph.addEdge(0,0); 
	     graph.addEdge(0,2);
	     graph.addEdge(0,3);
	     graph.addEdge(1,1);
	     graph.addEdge(1,2);
	     graph.addEdge(1,3);
	     graph.addEdge(2,2);
	     graph.addEdge(2,4);
	     graph.addEdge(2,5);
	     graph.addEdge(3,3);
	     graph.addEdge(3,4);
	     graph.addEdge(3,5);
	     graph.addEdge(4,4);
	     graph.addEdge(5,5);
	     
	     
	     System.out.println("Матриця суміжності");
	     graph.printAdjMatrix();
	     
	     System.out.println("Матриця інцидентності");
	     graph.printIncMatrix();
	     
	     System.out.println("Список ребер");
	     graph.printEdgesList();
	     
	     System.out.println("Список суміжності");
	     graph.printAdjList();
	     
	     System.out.println("\n\nОРІЄНТОВАНИЙ ГРАФ\n");
	     
	     OrientedGraph orGraph = new OrientedGraph(6, 12);
	     orGraph.addVertex('A'); //0
	     orGraph.addVertex('B'); //1
	     orGraph.addVertex('C'); //2
	     orGraph.addVertex('D'); //3
	     orGraph.addVertex('E'); //4
	     orGraph.addVertex('F'); //5
	     
	     orGraph.addEdge(0, 1);
	     orGraph.addEdge(0, 2);
	     orGraph.addEdge(0, 3);
	     orGraph.addEdge(0, 5);
	     orGraph.addEdge(1, 2);
	     orGraph.addEdge(1, 3);
	     orGraph.addEdge(1, 4);
	     orGraph.addEdge(2, 4);
	     orGraph.addEdge(3, 5);
	     orGraph.addEdge(4, 3);
	     orGraph.addEdge(4, 5);
	     orGraph.addEdge(5, 2);
	     
	     System.out.println("Матриця суміжності");
	     orGraph.printAdjMatrix();
	     
	     System.out.println("Матриця інцидентності");
	     orGraph.printIncMatrix();
	     
	     System.out.println("Список ребер");
	     orGraph.printEdgesList();
	     
	     System.out.println("Список суміжності");
	     orGraph.printAdjList();
	     
	     ///за матрицею суміжності побудувати матрицю інцидентності
	     
	     System.out.println("\n\nВведіть кількість вершин: ");
	     Scanner s = new Scanner(System.in);
		 int v = s.nextInt();
		 System.out.println("\n\nВведіть кількість ребер: ");
		 int e = s.nextInt();
	     Graph graph2 = new Graph(v,e);
	     graph2.createIncUsingAdj();
	     graph2.printAdjMatrix();
	     graph2.printIncMatrix();
	     
	     ///за матрицею суміжності побудувати список суміжності
	     System.out.println("\n\nВведіть кількість вершин: ");
		 v = s.nextInt();
		 Graph graph3 = new Graph(v,e);
		 graph3.createAdjListUsingAdjM();
		 graph3.printAdjList();
		 
		 //за аматрицую суміжності побудувати список ребер
		 System.out.println("\n\nВведіть кількість вершин: ");
		 int v2 = s.nextInt();
		 System.out.println("\n\nВведіть кількість ребер: ");
		 int e2 = s.nextInt();
	     Graph graph4 = new Graph(v2,e2);
	     graph4.createIncUsingAdj();
	     graph4.printEdgesListWithoutL();
	}
}
